local UILib = Instance.new("ScreenGui")
local UILibFrame = Instance.new("Frame")
local UICorner = Instance.new("UICorner")
local sideBar = Instance.new("Frame")
local UICorner_2 = Instance.new("UICorner")
local sideBarTitle = Instance.new("TextLabel")
local sideBarVersion = Instance.new("TextLabel")
local sideBarContents = Instance.new("Frame")
local UIListLayout = Instance.new("UIListLayout")
local UIPadding = Instance.new("UIPadding")
local sideBarBorder = Instance.new("Frame")
local UIStroke = Instance.new("UIStroke")
local UIGradient = Instance.new("UIGradient")
local tabTemplate_2 = Instance.new("TextButton")
local frameButtonTemplate_2 = Instance.new("TextButton")
local UICorner_8 = Instance.new("UICorner")
local frameTitleTemplate_2 = Instance.new("TextLabel")
local UIPadding_7 = Instance.new("UIPadding")
local UIFrame_2 = Instance.new("Frame")
local UICorner_3 = Instance.new("UICorner")
local InnerFrame_2 = Instance.new("ScrollingFrame")
local innerFrameTitle_2 = Instance.new("TextLabel")
local UIPadding_2 = Instance.new("UIPadding")
local UIListLayout_3 = Instance.new("UIListLayout")
local UIPadding_3 = Instance.new("UIPadding")
local frameSliderTemplate_2 = Instance.new("Frame")
local UICorner_4 = Instance.new("UICorner")
local sliderButton_2 = Instance.new("TextButton")
local UICorner_5 = Instance.new("UICorner")
local sliderInner_2 = Instance.new("Frame")
local UICorner_6 = Instance.new("UICorner")
local sliderTitle_2 = Instance.new("TextLabel")
local UIPadding_4 = Instance.new("UIPadding")
local sliderCounter_2 = Instance.new("TextBox")
local UIPadding_5 = Instance.new("UIPadding")
local tabTemplate_2 = Instance.new("TextButton")
local frameButtonTemplate_2 = Instance.new("TextButton")
local UICorner_8 = Instance.new("UICorner")
local frameTitleTemplate_2 = Instance.new("TextLabel")
local UIPadding_7 = Instance.new("UIPadding")
local UIFrame_2 = Instance.new("Frame")
local UICorner_3 = Instance.new("UICorner")
local InnerFrame_2 = Instance.new("ScrollingFrame")
local innerFrameTitle_2 = Instance.new("TextLabel")
local UIPadding_2 = Instance.new("UIPadding")
local UIListLayout_3 = Instance.new("UIListLayout")
local UIPadding_3 = Instance.new("UIPadding")
local frameSliderTemplate_2 = Instance.new("Frame")
local UICorner_4 = Instance.new("UICorner")
local sliderButton_2 = Instance.new("TextButton")
local UICorner_5 = Instance.new("UICorner")
local sliderInner_2 = Instance.new("Frame")
local UICorner_6 = Instance.new("UICorner")
local sliderTitle_2 = Instance.new("TextLabel")
local UIPadding_4 = Instance.new("UIPadding")
local sliderCounter_2 = Instance.new("TextBox")
local UIPadding_5 = Instance.new("UIPadding")
local clickSound = Instance.new("Sound")

local keybindG = Enum.KeyCode.RightShift

local player = game.Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

--Properties:

UILib.Name = "UILib"
UILib.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
UILib.Enabled = false
UILib.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
UILib.ResetOnSpawn = false

UILibFrame.Name = "UILibFrame"
UILibFrame.Parent = UILib
UILibFrame.BackgroundColor3 = Color3.fromRGB(235, 235, 235)
UILibFrame.Position = UDim2.new(0.346648902, 0, 0.284615397, 0)
UILibFrame.Size = UDim2.new(0, 690, 0, 392)

UICorner.Parent = UILibFrame

sideBar.Name = "sideBar"
sideBar.Parent = UILibFrame
sideBar.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
sideBar.BorderSizePixel = 0
sideBar.Size = UDim2.new(0, 182, 0, 392)

UICorner_2.Parent = sideBar

sideBarTitle.Name = "sideBarTitle"
sideBarTitle.Parent = sideBar
sideBarTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
sideBarTitle.BackgroundTransparency = 1.000
sideBarTitle.Size = UDim2.new(0, 190, 0, 28)
sideBarTitle.Font = Enum.Font.PatrickHand
sideBarTitle.Text = "DxmonRxins UILibrary"
sideBarTitle.TextColor3 = Color3.fromRGB(0, 0, 0)
sideBarTitle.TextScaled = true
sideBarTitle.TextSize = 25.000
sideBarTitle.TextWrapped = true

sideBarVersion.Name = "sideBarVersion"
sideBarVersion.Parent = sideBar
sideBarVersion.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
sideBarVersion.BackgroundTransparency = 1.000
sideBarVersion.Position = UDim2.new(0, 0, 0.056122452, 0)
sideBarVersion.Size = UDim2.new(0, 190, 0, 19)
sideBarVersion.Font = Enum.Font.PatrickHand
sideBarVersion.Text = "Version: v0.01"
sideBarVersion.TextColor3 = Color3.fromRGB(0, 0, 0)
sideBarVersion.TextScaled = true
sideBarVersion.TextSize = 25.000
sideBarVersion.TextTransparency = 0.500
sideBarVersion.TextWrapped = true
sideBarVersion.TextYAlignment = Enum.TextYAlignment.Top

sideBarContents.Name = "sideBarContents"
sideBarContents.Parent = sideBar
sideBarContents.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
sideBarContents.BackgroundTransparency = 1.000
sideBarContents.Position = UDim2.new(0, 0, 0.127551019, 0)
sideBarContents.Size = UDim2.new(0, 190, 0, 342)

UIListLayout.Parent = sideBarContents
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout.Padding = UDim.new(0, 10)

UIPadding.Parent = sideBarContents
UIPadding.PaddingLeft = UDim.new(0, 20)

sideBarBorder.Name = "sideBarBorder"
sideBarBorder.Parent = UILibFrame
sideBarBorder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
sideBarBorder.BorderSizePixel = 0
sideBarBorder.Position = UDim2.new(0.253623188, 0, 0, 0)
sideBarBorder.Size = UDim2.new(0, 15, 0, 392)
sideBarBorder.ZIndex = 0

tabTemplate_2.Name = "tabTemplate"
tabTemplate_2.Parent = script
tabTemplate_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
tabTemplate_2.BorderSizePixel = 0
tabTemplate_2.Size = UDim2.new(0, 145, 0, 30)
tabTemplate_2.Font = Enum.Font.PatrickHand
tabTemplate_2.Text = "tab1"
tabTemplate_2.TextColor3 = Color3.fromRGB(0, 0, 0)
tabTemplate_2.TextScaled = true
tabTemplate_2.TextSize = 14.000
tabTemplate_2.TextWrapped = true

frameButtonTemplate_2.Name = "frameButtonTemplate"
frameButtonTemplate_2.Parent = script
frameButtonTemplate_2.BackgroundColor3 = Color3.fromRGB(187, 255, 155)
frameButtonTemplate_2.BorderSizePixel = 0
frameButtonTemplate_2.Position = UDim2.new(0, 0, 0.135359123, 0)
frameButtonTemplate_2.Size = UDim2.new(0, 460, 0, 30)
frameButtonTemplate_2.Font = Enum.Font.PatrickHand
frameButtonTemplate_2.Text = "button1"
frameButtonTemplate_2.TextColor3 = Color3.fromRGB(0, 0, 0)
frameButtonTemplate_2.TextScaled = true
frameButtonTemplate_2.TextSize = 14.000
frameButtonTemplate_2.TextWrapped = true

UICorner_8.Parent = frameButtonTemplate_2

frameTitleTemplate_2.Name = "frameTitleTemplate"
frameTitleTemplate_2.Parent = script
frameTitleTemplate_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
frameTitleTemplate_2.BackgroundTransparency = 1.000
frameTitleTemplate_2.Position = UDim2.new(0, 0, 0.121546961, 0)
frameTitleTemplate_2.Size = UDim2.new(0, 477, 0, 32)
frameTitleTemplate_2.Font = Enum.Font.PatrickHand
frameTitleTemplate_2.Text = "Main"
frameTitleTemplate_2.TextColor3 = Color3.fromRGB(0, 0, 0)
frameTitleTemplate_2.TextScaled = true
frameTitleTemplate_2.TextSize = 25.000
frameTitleTemplate_2.TextWrapped = true

UIPadding_7.Parent = frameTitleTemplate_2
UIPadding_7.PaddingRight = UDim.new(0, 10)

UIFrame_2.Name = "UIFrame"
UIFrame_2.Parent = script
UIFrame_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
UIFrame_2.Position = UDim2.new(0.286956519, 0, 0.0204081628, 0)
UIFrame_2.Size = UDim2.new(0, 483, 0, 376)

UICorner_3.Parent = UIFrame_2

InnerFrame_2.Name = "InnerFrame"
InnerFrame_2.Parent = UIFrame_2
InnerFrame_2.Active = true
InnerFrame_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
InnerFrame_2.BorderSizePixel = 0
InnerFrame_2.Position = UDim2.new(0.0124223605, 0, 0.0159574468, 0)
InnerFrame_2.Size = UDim2.new(0, 471, 0, 362)
InnerFrame_2.CanvasSize = UDim2.new(0, 0, 0, 0)
InnerFrame_2.ScrollBarThickness = 0

innerFrameTitle_2.Name = "innerFrameTitle"
innerFrameTitle_2.Parent = InnerFrame_2
innerFrameTitle_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
innerFrameTitle_2.BackgroundTransparency = 1.000
innerFrameTitle_2.Size = UDim2.new(0, 477, 0, 39)
innerFrameTitle_2.Font = Enum.Font.PatrickHand
innerFrameTitle_2.Text = "Main"
innerFrameTitle_2.TextColor3 = Color3.fromRGB(0, 0, 0)
innerFrameTitle_2.TextScaled = true
innerFrameTitle_2.TextSize = 25.000
innerFrameTitle_2.TextWrapped = true

UIPadding_2.Parent = innerFrameTitle_2
UIPadding_2.PaddingRight = UDim.new(0, 10)

UIListLayout_3.Parent = InnerFrame_2
UIListLayout_3.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout_3.Padding = UDim.new(0, 5)

UIPadding_3.Parent = InnerFrame_2
UIPadding_3.PaddingLeft = UDim.new(0, 5)

frameSliderTemplate_2.Name = "frameSliderTemplate"
frameSliderTemplate_2.Parent = script
frameSliderTemplate_2.BackgroundColor3 = Color3.fromRGB(222, 222, 222)
frameSliderTemplate_2.Position = UDim2.new(0, 0, 0.121546961, 0)
frameSliderTemplate_2.Size = UDim2.new(0, 460, 0, 70)

UICorner_4.Parent = frameSliderTemplate_2

sliderButton_2.Name = "sliderButton"
sliderButton_2.Parent = frameSliderTemplate_2
sliderButton_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
sliderButton_2.ClipsDescendants = true
sliderButton_2.Position = UDim2.new(0.0152173908, 0, 0.45714286, 0)
sliderButton_2.Size = UDim2.new(0, 447, 0, 29)
sliderButton_2.Font = Enum.Font.SourceSans
sliderButton_2.Text = ""
sliderButton_2.TextColor3 = Color3.fromRGB(0, 0, 0)
sliderButton_2.TextSize = 14.000

UICorner_5.Parent = sliderButton_2

sliderInner_2.Name = "sliderInner"
sliderInner_2.Parent = sliderButton_2
sliderInner_2.BackgroundColor3 = Color3.fromRGB(153, 255, 225)
sliderInner_2.Size = UDim2.new(0, 0, 1, 0)

UICorner_6.Parent = sliderInner_2

sliderTitle_2.Name = "sliderTitle"
sliderTitle_2.Parent = frameSliderTemplate_2
sliderTitle_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
sliderTitle_2.BackgroundTransparency = 1.000
sliderTitle_2.Position = UDim2.new(0.0152173908, 0, 0, 0)
sliderTitle_2.Size = UDim2.new(0, 256, 0, 32)
sliderTitle_2.Font = Enum.Font.PatrickHand
sliderTitle_2.Text = "Main"
sliderTitle_2.TextColor3 = Color3.fromRGB(0, 0, 0)
sliderTitle_2.TextScaled = true
sliderTitle_2.TextSize = 25.000
sliderTitle_2.TextWrapped = true
sliderTitle_2.TextXAlignment = Enum.TextXAlignment.Left

UIPadding_4.Parent = sliderTitle_2
UIPadding_4.PaddingRight = UDim.new(0, 10)

sliderCounter_2.Name = "sliderCounter"
sliderCounter_2.Parent = frameSliderTemplate_2
sliderCounter_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
sliderCounter_2.BackgroundTransparency = 1.000
sliderCounter_2.BorderSizePixel = 0
sliderCounter_2.Position = UDim2.new(0.591000021, 0, 0, 0)
sliderCounter_2.Size = UDim2.new(0, 182, 0, 32)
sliderCounter_2.Font = Enum.Font.PatrickHand
sliderCounter_2.Text = "0"
sliderCounter_2.TextColor3 = Color3.fromRGB(0, 0, 0)
sliderCounter_2.TextScaled = true
sliderCounter_2.TextSize = 14.000
sliderCounter_2.TextWrapped = true
sliderCounter_2.TextXAlignment = Enum.TextXAlignment.Right

UIPadding_5.Parent = sliderCounter_2
UIPadding_5.PaddingRight = UDim.new(0, 10)

tabTemplate_2.Name = "tabTemplate"
tabTemplate_2.Parent = script
tabTemplate_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
tabTemplate_2.BorderSizePixel = 0
tabTemplate_2.Size = UDim2.new(0, 145, 0, 30)
tabTemplate_2.Font = Enum.Font.PatrickHand
tabTemplate_2.Text = "tab1"
tabTemplate_2.TextColor3 = Color3.fromRGB(0, 0, 0)
tabTemplate_2.TextScaled = true
tabTemplate_2.TextSize = 14.000
tabTemplate_2.TextWrapped = true

frameButtonTemplate_2.Name = "frameButtonTemplate"
frameButtonTemplate_2.Parent = script
frameButtonTemplate_2.BackgroundColor3 = Color3.fromRGB(187, 255, 155)
frameButtonTemplate_2.BorderSizePixel = 0
frameButtonTemplate_2.Position = UDim2.new(0, 0, 0.135359123, 0)
frameButtonTemplate_2.Size = UDim2.new(0, 460, 0, 30)
frameButtonTemplate_2.Font = Enum.Font.PatrickHand
frameButtonTemplate_2.Text = "button1"
frameButtonTemplate_2.TextColor3 = Color3.fromRGB(0, 0, 0)
frameButtonTemplate_2.TextScaled = true
frameButtonTemplate_2.TextSize = 14.000
frameButtonTemplate_2.TextWrapped = true

UICorner_8.Parent = frameButtonTemplate_2

frameTitleTemplate_2.Name = "frameTitleTemplate"
frameTitleTemplate_2.Parent = script
frameTitleTemplate_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
frameTitleTemplate_2.BackgroundTransparency = 1.000
frameTitleTemplate_2.Position = UDim2.new(0, 0, 0.121546961, 0)
frameTitleTemplate_2.Size = UDim2.new(0, 477, 0, 32)
frameTitleTemplate_2.Font = Enum.Font.PatrickHand
frameTitleTemplate_2.Text = "Main"
frameTitleTemplate_2.TextColor3 = Color3.fromRGB(0, 0, 0)
frameTitleTemplate_2.TextScaled = true
frameTitleTemplate_2.TextSize = 25.000
frameTitleTemplate_2.TextWrapped = true

UIPadding_7.Parent = frameTitleTemplate_2
UIPadding_7.PaddingRight = UDim.new(0, 10)

UIFrame_2.Name = "UIFrame"
UIFrame_2.Parent = script
UIFrame_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
UIFrame_2.Position = UDim2.new(0.286956519, 0, 0.0204081628, 0)
UIFrame_2.Size = UDim2.new(0, 483, 0, 376)

UICorner_3.Parent = UIFrame_2

InnerFrame_2.Name = "InnerFrame"
InnerFrame_2.Parent = UIFrame_2
InnerFrame_2.Active = true
InnerFrame_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
InnerFrame_2.BorderSizePixel = 0
InnerFrame_2.Position = UDim2.new(0.0124223605, 0, 0.0159574468, 0)
InnerFrame_2.Size = UDim2.new(0, 471, 0, 362)
InnerFrame_2.CanvasSize = UDim2.new(0, 0, 0, 0)
InnerFrame_2.ScrollBarThickness = 0

innerFrameTitle_2.Name = "innerFrameTitle"
innerFrameTitle_2.Parent = InnerFrame_2
innerFrameTitle_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
innerFrameTitle_2.BackgroundTransparency = 1.000
innerFrameTitle_2.Size = UDim2.new(0, 477, 0, 39)
innerFrameTitle_2.Font = Enum.Font.PatrickHand
innerFrameTitle_2.Text = "Main"
innerFrameTitle_2.TextColor3 = Color3.fromRGB(0, 0, 0)
innerFrameTitle_2.TextScaled = true
innerFrameTitle_2.TextSize = 25.000
innerFrameTitle_2.TextWrapped = true

UIPadding_2.Parent = innerFrameTitle_2
UIPadding_2.PaddingRight = UDim.new(0, 10)

UIListLayout_3.Parent = InnerFrame_2
UIListLayout_3.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout_3.Padding = UDim.new(0, 5)

UIPadding_3.Parent = InnerFrame_2
UIPadding_3.PaddingLeft = UDim.new(0, 5)

frameSliderTemplate_2.Name = "frameSliderTemplate"
frameSliderTemplate_2.Parent = script
frameSliderTemplate_2.BackgroundColor3 = Color3.fromRGB(222, 222, 222)
frameSliderTemplate_2.Position = UDim2.new(0, 0, 0.121546961, 0)
frameSliderTemplate_2.Size = UDim2.new(0, 460, 0, 70)

UICorner_4.Parent = frameSliderTemplate_2

sliderButton_2.Name = "sliderButton"
sliderButton_2.Parent = frameSliderTemplate_2
sliderButton_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
sliderButton_2.ClipsDescendants = true
sliderButton_2.Position = UDim2.new(0.0152173908, 0, 0.45714286, 0)
sliderButton_2.Size = UDim2.new(0, 447, 0, 29)
sliderButton_2.Font = Enum.Font.SourceSans
sliderButton_2.Text = ""
sliderButton_2.TextColor3 = Color3.fromRGB(0, 0, 0)
sliderButton_2.TextSize = 14.000

UICorner_5.Parent = sliderButton_2

sliderInner_2.Name = "sliderInner"
sliderInner_2.Parent = sliderButton_2
sliderInner_2.BackgroundColor3 = Color3.fromRGB(153, 255, 225)
sliderInner_2.Size = UDim2.new(0, 0, 1, 0)

UICorner_6.Parent = sliderInner_2

sliderTitle_2.Name = "sliderTitle"
sliderTitle_2.Parent = frameSliderTemplate_2
sliderTitle_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
sliderTitle_2.BackgroundTransparency = 1.000
sliderTitle_2.Position = UDim2.new(0.0152173908, 0, 0, 0)
sliderTitle_2.Size = UDim2.new(0, 256, 0, 32)
sliderTitle_2.Font = Enum.Font.PatrickHand
sliderTitle_2.Text = "Main"
sliderTitle_2.TextColor3 = Color3.fromRGB(0, 0, 0)
sliderTitle_2.TextScaled = true
sliderTitle_2.TextSize = 25.000
sliderTitle_2.TextWrapped = true
sliderTitle_2.TextXAlignment = Enum.TextXAlignment.Left

UIPadding_4.Parent = sliderTitle_2
UIPadding_4.PaddingRight = UDim.new(0, 10)

sliderCounter_2.Name = "sliderCounter"
sliderCounter_2.Parent = frameSliderTemplate_2
sliderCounter_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
sliderCounter_2.BackgroundTransparency = 1.000
sliderCounter_2.BorderSizePixel = 0
sliderCounter_2.Position = UDim2.new(0.591000021, 0, 0, 0)
sliderCounter_2.Size = UDim2.new(0, 182, 0, 32)
sliderCounter_2.Font = Enum.Font.PatrickHand
sliderCounter_2.Text = "0"
sliderCounter_2.TextColor3 = Color3.fromRGB(0, 0, 0)
sliderCounter_2.TextScaled = true
sliderCounter_2.TextSize = 14.000
sliderCounter_2.TextWrapped = true
sliderCounter_2.TextXAlignment = Enum.TextXAlignment.Right

UIPadding_5.Parent = sliderCounter_2
UIPadding_5.PaddingRight = UDim.new(0, 10)

UIStroke.Name = "UIStroke"
UIStroke.Thickness = 7.5
UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Contextual
UIStroke.LineJoinMode = Enum.LineJoinMode.Round
UIStroke.Transparency = 0
UIStroke.Enabled = true
UIStroke.Color = Color3.fromRGB(255, 255, 255)
UIStroke.Parent = UILibFrame

UIGradient.Name = "UIGradient"
UIGradient.Color = ColorSequence.new{
	ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 120, 120)),
	ColorSequenceKeypoint.new(0.14, Color3.fromRGB(255, 150, 74)),
	ColorSequenceKeypoint.new(0.285, Color3.fromRGB(255, 251, 119)),
	ColorSequenceKeypoint.new(0.433, Color3.fromRGB(132, 255, 98)),
	ColorSequenceKeypoint.new(0.574, Color3.fromRGB(101, 101, 255)),
	ColorSequenceKeypoint.new(0.725, Color3.fromRGB(189, 167, 255)),
	ColorSequenceKeypoint.new(0.874, Color3.fromRGB(224, 149, 255)),
	ColorSequenceKeypoint.new(1, Color3.fromRGB(229, 149, 255))
}
UIGradient.Enabled = true
UIGradient.Parent = UIStroke

clickSound.Name = "clickSound"
clickSound.SoundId = "rbxassetid://1245327595"
clickSound.Parent = script

local frameToggleTemplate = Instance.new("Frame")
local toggleText = Instance.new("TextLabel")
local UIPadding = Instance.new("UIPadding")
local toggleBG = Instance.new("TextButton")
local UICorner = Instance.new("UICorner")
local toggleSlider = Instance.new("TextButton")
local UICorner_2 = Instance.new("UICorner")
local UIStroke = Instance.new("UIStroke")
local toggleValue = Instance.new("BoolValue")

frameToggleTemplate.Name = "frameToggleTemplate"
frameToggleTemplate.Parent = script
frameToggleTemplate.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
frameToggleTemplate.BackgroundTransparency = 1.000
frameToggleTemplate.Position = UDim2.new(0, 0, 0.121546961, 0)
frameToggleTemplate.Size = UDim2.new(0, 466, 0, 56)

toggleValue.Parent = frameToggleTemplate
toggleValue.Value = true
toggleValue.Name = "toggleValue"

toggleText.Name = "toggleText"
toggleText.Parent = frameToggleTemplate
toggleText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
toggleText.BackgroundTransparency = 1.000
toggleText.Position = UDim2.new(0, 0, 0.125, 0)
toggleText.Size = UDim2.new(0, 234, 0, 39)
toggleText.Font = Enum.Font.PatrickHand
toggleText.Text = "DxmonRxin's Toggle:"
toggleText.TextColor3 = Color3.fromRGB(0, 0, 0)
toggleText.TextScaled = true
toggleText.TextSize = 25.000
toggleText.TextWrapped = true
toggleText.TextXAlignment = Enum.TextXAlignment.Right

UIPadding.Parent = toggleText
UIPadding.PaddingRight = UDim.new(0, 10)

toggleBG.Name = "toggleBG"
toggleBG.Parent = frameToggleTemplate
toggleBG.BackgroundColor3 = Color3.fromRGB(0, 255, 127)
toggleBG.Position = UDim2.new(0.527897, 0, 0.125, 0)
toggleBG.Size = UDim2.new(0, 105, 0, 39)
toggleBG.Font = Enum.Font.SourceSans
toggleBG.Text = ""
toggleBG.TextColor3 = Color3.fromRGB(0, 0, 0)
toggleBG.TextSize = 14.000

UICorner.CornerRadius = UDim.new(0, 20)
UICorner.Parent = toggleBG

toggleSlider.Name = "toggleSlider"
toggleSlider.Parent = toggleBG
toggleSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
toggleSlider.Position = UDim2.new(0.487115175, 0, 0.15384616, 0)
toggleSlider.Size = UDim2.new(0, 45, 0, 26)
toggleSlider.Font = Enum.Font.SourceSans
toggleSlider.Text = ""
toggleSlider.TextColor3 = Color3.fromRGB(0, 0, 0)
toggleSlider.TextSize = 14.000

UICorner_2.CornerRadius = UDim.new(0, 20)
UICorner_2.Parent = toggleSlider

UIStroke.Name = "UIStroke"
UIStroke.Parent = toggleBG
UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
UIStroke.Color = Color3.fromRGB(0, 0, 0)
UIStroke.LineJoinMode = Enum.LineJoinMode.Round
UIStroke.Thickness = 3
UIStroke.Transparency = 0
UIStroke.Enabled = true

local frameKeybindTemplate = Instance.new("Frame")
local keybindButton = Instance.new("TextButton")
local UICorner = Instance.new("UICorner")
local Frame = Instance.new("Frame")
local UICorner_2 = Instance.new("UICorner")
local TextLabel = Instance.new("TextLabel")
local keybindTitle = Instance.new("TextLabel")
local UIPadding = Instance.new("UIPadding")
local UICorner_3 = Instance.new("UICorner")
local StringValue_69 = Instance.new("StringValue")

frameKeybindTemplate.Name = "frameKeybindTemplate"
frameKeybindTemplate.Parent = script
frameKeybindTemplate.BackgroundColor3 = Color3.fromRGB(222, 222, 222)
frameKeybindTemplate.Position = UDim2.new(0, 0, 0.121546961, 0)
frameKeybindTemplate.Size = UDim2.new(0, 460, 0, 70)

StringValue_69.Name = "keybindValue"
StringValue_69.Parent = frameKeybindTemplate
StringValue_69.Value = tostring(nil)

keybindButton.Name = "keybindButton"
keybindButton.Parent = frameKeybindTemplate
keybindButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
keybindButton.ClipsDescendants = true
keybindButton.Position = UDim2.new(0.856521726, 0, 0.0714285746, 0)
keybindButton.Size = UDim2.new(0, 60, 0, 60)
keybindButton.Font = Enum.Font.SourceSans
keybindButton.Text = ""
keybindButton.TextColor3 = Color3.fromRGB(0, 0, 0)
keybindButton.TextSize = 14.000

UICorner.Parent = keybindButton

Frame.Parent = keybindButton
Frame.BackgroundColor3 = Color3.fromRGB(243, 243, 243)
Frame.Position = UDim2.new(0.100000001, 0, 0.100000001, 0)
Frame.Size = UDim2.new(0.800000012, 0, 0.800000012, 0)

UICorner_2.Parent = Frame

TextLabel.Parent = Frame
TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.BackgroundTransparency = 1.000
TextLabel.Size = UDim2.new(1, 0, 1, 0)
TextLabel.Font = Enum.Font.PatrickHand
TextLabel.Text = "E"
TextLabel.TextColor3 = Color3.fromRGB(0, 0, 0)
TextLabel.TextScaled = true
TextLabel.TextSize = 14.000
TextLabel.TextWrapped = true

keybindTitle.Name = "keybindTitle"
keybindTitle.Parent = frameKeybindTemplate
keybindTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
keybindTitle.BackgroundTransparency = 1.000
keybindTitle.Position = UDim2.new(0.0326086953, 0, 0.271428585, 0)
keybindTitle.Size = UDim2.new(0, 256, 0, 32)
keybindTitle.Font = Enum.Font.PatrickHand
keybindTitle.Text = "Keybind"
keybindTitle.TextColor3 = Color3.fromRGB(0, 0, 0)
keybindTitle.TextScaled = true
keybindTitle.TextSize = 25.000
keybindTitle.TextWrapped = true
keybindTitle.TextXAlignment = Enum.TextXAlignment.Left

UIPadding.Parent = keybindTitle
UIPadding.PaddingRight = UDim.new(0, 10)

UICorner_3.Parent = frameKeybindTemplate

-- PRE-SCRIPTS --

local uis = game:GetService("UserInputService")

uis.InputBegan:Connect(function(input, typing)
	if string.sub(tostring(input.KeyCode), 14, string.len(tostring(input.KeyCode))) == keybindG and typing == false then
		UILibFrame.Visible = not UILibFrame.Visible
	end
end)

local UIStroke_2 = 	UIStroke:Clone()
UIStroke_2.Parent = toggleSlider

repeat wait() until UILib ~= nil

-- SCRIPTS --

local tweenService = game:GetService("TweenService")

local lib = {}

function lib.createWindow(windowName)
	UILib.UILibFrame.sideBar.sideBarTitle.Text = tostring(windowName)
	UILib.Enabled = true
end

function lib.createFrame(frameName)
	local newFrame = script.UIFrame:Clone()
	newFrame.Name = tostring(frameName)
	newFrame.Parent = UILib.UILibFrame
	newFrame.Visible = false
	newFrame.InnerFrame.innerFrameTitle.Text = tostring(frameName)
end

function lib.createFrameButton(buttonName, frameName)
	if UILib.UILibFrame:FindFirstChild(tostring(frameName)) then
		local frame = UILibFrame:WaitForChild(tostring(frameName))
		local newButton = script.frameButtonTemplate:Clone()
		newButton.Name = tostring(buttonName)
		newButton.Text = tostring(buttonName)
		newButton.Parent = frame:WaitForChild("InnerFrame")

		newButton.Activated:Connect(function()
			clickSound:Play()
		end)
	end
end

function lib.createFrameKeybind(keybindName, frameName, startingKeybind)
	local frame = UILibFrame:WaitForChild(tostring(frameName))
	local newKeybind = script.frameKeybindTemplate:Clone()
	newKeybind.Name = tostring(keybindName)
	newKeybind.keybindTitle.Text = tostring(keybindName)
	newKeybind.Parent = frame:WaitForChild("InnerFrame")
	
	local db = false
	
	if string.len(startingKeybind) > 0 and string.len(startingKeybind) < 50 then
		newKeybind.keybindButton.Frame.TextLabel.Text = tostring(startingKeybind)
		newKeybind:WaitForChild("keybindValue").Value = tostring(startingKeybind)
	end

	newKeybind.keybindButton.Activated:Connect(function()
		if db == false then
			db = true
			clickSound:Play()
			newKeybind.keybindButton.Frame.TextLabel.Text = "..."
			local kb ; kb = uis.InputBegan:Connect(function(input, typing)
				if typing == false then
					local stringA = string.sub(tostring(input.KeyCode), 14, string.len(tostring(input.KeyCode)))
					newKeybind.keybindButton.Frame.TextLabel.Text = stringA
					newKeybind:WaitForChild("keybindValue").Value = stringA
					db = false
					kb:Disconnect()
				end
			end)
		end
	end)
end

function lib.returnFrameKeybindValue(keybindName, frameName)
	if UILibFrame:FindFirstChild(tostring(frameName)) then
		local UIFrame = UILibFrame:WaitForChild(tostring(frameName))
		if UIFrame:FindFirstChild("InnerFrame") then
			local InnerFrame = UIFrame:WaitForChild("InnerFrame")
			if InnerFrame:FindFirstChild(tostring(keybindName)) then
				local keybind = InnerFrame:WaitForChild(tostring(keybindName))
				if keybind:FindFirstChild("keybindValue") then
					local obj = keybind:WaitForChild("keybindValue")
					return obj.Value
				end
			end
		end
	end
end

function lib.createFrameSlider(sliderName, minValue, maxValue, frameName)
	local minvalue = minValue or 16
	local maxvalue = maxValue or 100

	local frame = UILib.UILibFrame:WaitForChild(tostring(frameName))

	local newSlider = script.frameSliderTemplate:Clone()
	newSlider.sliderTitle.Text = tostring(sliderName)
	newSlider.sliderCounter.Text = tostring(minValue)
	newSlider.Name = tostring(sliderName)
	newSlider.Parent = frame:WaitForChild("InnerFrame")

	local sliderButton = newSlider.sliderButton
	local sliderFrame = sliderButton.sliderInner
	local sliderValue = newSlider.sliderCounter

	local mouse = game.Players.LocalPlayer:GetMouse()
	local Value;

	callback = callback or function() end

	sliderButton.MouseButton1Down:Connect(function()
		clickSound:Play()
		Value = math.floor((((tonumber(maxvalue) - tonumber(minvalue)) / 447) * sliderFrame.AbsoluteSize.X) + tonumber(minvalue)) or 0
		sliderValue.Text = Value
		pcall(function()
			callback(Value)
		end)
		sliderFrame.Size = UDim2.new(0, math.clamp(mouse.X - sliderFrame.AbsolutePosition.X, 0, 447), 1, 0)
		moveconnection = mouse.Move:Connect(function()
			sliderValue.Text = Value
			Value = math.floor((((tonumber(maxvalue) - tonumber(minvalue)) / 447) * sliderFrame.AbsoluteSize.X) + tonumber(minvalue))
			pcall(function()
				callback(Value)
			end)
			sliderFrame.Size = UDim2.new(0, math.clamp(mouse.X - sliderFrame.AbsolutePosition.X, 0, 447), 1, 0)
		end)
		releaseconnection = uis.InputEnded:Connect(function(Mouse)
			if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then
				Value = math.floor((((tonumber(maxvalue) - tonumber(minvalue)) / 447) * sliderFrame.AbsoluteSize.X) + tonumber(minvalue))
				sliderValue.Text = Value
				pcall(function()
					callback(Value)
				end)
				sliderFrame.Size = UDim2.new(0, math.clamp(mouse.X - sliderFrame.AbsolutePosition.X, 0, 447), 1, 0)
				moveconnection:Disconnect()
				releaseconnection:Disconnect()
			end
		end)
	end)
	sliderValue.FocusLost:Connect(function()
		if tonumber(sliderValue.Text) < minValue then
			sliderValue.Text = tostring(minValue)
		end
		if tonumber(sliderValue.Text) > maxValue then
			sliderValue.Text = tostring(maxValue)
		end
	end)
end

function lib.createFrameText(labelName, frameName)
	if UILib.UILibFrame:FindFirstChild(tostring(frameName)) then
		local frame = UILib.UILibFrame:WaitForChild(tostring(frameName))
		local newLabel = script.frameTitleTemplate:Clone()
		newLabel.Name = tostring(labelName)
		newLabel.Text = tostring(labelName)
		newLabel.Parent = frame:WaitForChild("InnerFrame")
	end
end

function lib.createFrameToggle(toggleName, frameName, defaultBool)
	if UILib.UILibFrame:FindFirstChild(tostring(frameName)) then
		local frame = UILib.UILibFrame:WaitForChild(tostring(frameName))
		local newToggle = frameToggleTemplate:Clone()
		newToggle.Name = tostring(toggleName)
		newToggle.toggleText.Text = tostring(toggleName)..":"
		newToggle.Parent = frame:WaitForChild("InnerFrame")
		local toggleBG = newToggle:WaitForChild("toggleBG")
		local toggleSlider = toggleBG:WaitForChild("toggleSlider")
		local toggleValue = newToggle:WaitForChild("toggleValue")

		local currentlyTweening = false

		toggleBG.Activated:Connect(function()
			clickSound:Play()
			if toggleValue.Value == false and currentlyTweening == false then
				toggleValue.Value = true
				local goalpos = toggleSlider.Position + UDim2.new(0.419, 0, 0, 0)
				local tweenPosCoroutine = coroutine.wrap(function()
					local function callback(state)
						if state == Enum.TweenStatus.Completed then
							currentlyTweening = false
						end
					end
					local tweenPos = toggleSlider:TweenPosition(
						goalpos,
						Enum.EasingDirection.In,
						Enum.EasingStyle.Sine,
						0.75,
						false,
						callback
					)
					currentlyTweening = true
					tweenPos:Play()
				end)
				tweenPosCoroutine()
				local tweenColorCoroutine = coroutine.wrap(function()
					local tweenColor = TweenInfo.new(
						0.75,
						Enum.EasingStyle.Sine,
						Enum.EasingDirection.In,
						0,
						false,
						0
					)
					tweenService:Create(toggleBG, tweenColor, {BackgroundColor3 = Color3.fromRGB(0, 255, 127)}):Play()
				end)
				tweenColorCoroutine()
			elseif toggleValue.Value == true and currentlyTweening == false then
				toggleValue.Value = false
				local goalpos = toggleSlider.Position - UDim2.new(0.419, 0, 0, 0)
				local tweenPosCoroutine = coroutine.wrap(function()
					local function callback(state)
						if state == Enum.TweenStatus.Completed then
							currentlyTweening = false
						end
					end
					local tweenPos = toggleSlider:TweenPosition(
						goalpos,
						Enum.EasingDirection.In,
						Enum.EasingStyle.Sine,
						0.75,
						false,
						callback
					)
					currentlyTweening = true
					tweenPos:Play()
				end)
				tweenPosCoroutine()
				local tweenColorCoroutine = coroutine.wrap(function()
					local tweenColor = TweenInfo.new(
						0.75,
						Enum.EasingStyle.Sine,
						Enum.EasingDirection.In,
						0,
						false,
						0
					)
					tweenService:Create(toggleBG, tweenColor, {BackgroundColor3 = Color3.fromRGB(207, 207, 207)}):Play()
				end)
				tweenColorCoroutine()
			end
		end)

		toggleSlider.Activated:Connect(function()
			clickSound:Play()
			if toggleValue.Value == false and currentlyTweening == false then
				toggleValue.Value = true
				local goalpos = toggleSlider.Position + UDim2.new(0.419, 0, 0, 0)
				local tweenPosCoroutine = coroutine.wrap(function()
					local function callback(state)
						if state == Enum.TweenStatus.Completed then
							currentlyTweening = false
						end
					end
					local tweenPos = toggleSlider:TweenPosition(
						goalpos,
						Enum.EasingDirection.In,
						Enum.EasingStyle.Sine,
						0.75,
						false,
						callback
					)
					currentlyTweening = true
					tweenPos:Play()
				end)
				tweenPosCoroutine()
				local tweenColorCoroutine = coroutine.wrap(function()
					local tweenColor = TweenInfo.new(
						0.75,
						Enum.EasingStyle.Sine,
						Enum.EasingDirection.In,
						0,
						false,
						0
					)
					tweenService:Create(toggleBG, tweenColor, {BackgroundColor3 = Color3.fromRGB(0, 255, 127)}):Play()
				end)
				tweenColorCoroutine()
			elseif toggleValue.Value == true and currentlyTweening == false then
				toggleValue.Value = false
				local goalpos = toggleSlider.Position - UDim2.new(0.419, 0, 0, 0)
				local tweenPosCoroutine = coroutine.wrap(function()
					local function callback(state)
						if state == Enum.TweenStatus.Completed then
							currentlyTweening = false
						end
					end
					local tweenPos = toggleSlider:TweenPosition(
						goalpos,
						Enum.EasingDirection.In,
						Enum.EasingStyle.Sine,
						0.75,
						false,
						callback
					)
					currentlyTweening = true
					tweenPos:Play()
				end)
				tweenPosCoroutine()
				local tweenColorCoroutine = coroutine.wrap(function()
					local tweenColor = TweenInfo.new(
						0.75,
						Enum.EasingStyle.Sine,
						Enum.EasingDirection.In,
						0,
						false,
						0
					)
					tweenService:Create(toggleBG, tweenColor, {BackgroundColor3 = Color3.fromRGB(207, 207, 206)}):Play()
				end)
				tweenColorCoroutine()
			end
		end)

		if defaultBool == false then
			toggleSlider.Position -= UDim2.new(0.419, 0, 0, 0)
			toggleBG.BackgroundColor3 = Color3.fromRGB(207, 207, 207)
			toggleValue.Value = false
		end
	end
end

function lib.setVersion(versionNum)
	UILib.UILibFrame.sideBar.sideBarVersion.Text = "Version: v"..tonumber(versionNum)
end

function lib.createTab(tabName)
	if #UILib.UILibFrame.sideBar.sideBarContents:GetChildren() < 10 then
		local tab = script.tabTemplate:Clone()
		tab.Name = tostring(tabName)
		tab.Text = tostring(tabName)
		tab.Parent = UILib.UILibFrame.sideBar.sideBarContents

		local tabUIStroke = Instance.new("UIStroke")
		tabUIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
		tabUIStroke.Color = Color3.fromRGB(0, 0, 0)
		tabUIStroke.LineJoinMode = Enum.LineJoinMode.Round
		tabUIStroke.Thickness = 3.5
		tabUIStroke.Transparency = 0
		tabUIStroke.Enabled = true
		tabUIStroke.Name = "UIStroke"
		tabUIStroke.Parent = tab

		tab.Activated:Connect(function()
			clickSound:Play()
		end)
	end
end

function lib.hideWindow()
	UILibFrame.Visible = false
end

function lib.showWindow()
	UILibFrame.Visible = true
end

function lib.toggleWindow()
	UILibFrame.Visible = not UILibFrame.Visible
end

lib.notificationOnHide = true

function lib.hideWindowSideButton(buttonName)
	if UILib.UILibFrame.sideBar.sideBarContents:FindFirstChild(tostring(buttonName)) then
		UILib.UILibFrame.sideBar.sideBarContents:WaitForChild(tostring(buttonName)).Activated:Connect(function()
			lib.hideWindow()
			if lib.notificationOnHide ~= nil then
				if lib.notificationOnHide == true then
					local bindf = Instance.new("BindableFunction", script)
					bindf.OnInvoke = function(text)
						if text == "Re-open" then
							lib.showWindow()
							clickSound:Play()
							bindf:Destroy()
						end
					end
					local deleteCoroutine = coroutine.wrap(function()
						repeat wait() until bindf == nil
						if bindf == nil then
							wait(0.05)
							if UILib.Enabled == false then
								UILib:Destroy()
							end
						end
					end)
					deleteCoroutine()
					game:GetService("Debris"):AddItem(bindf, 5)
					game:GetService("StarterGui"):SetCore("SendNotification", {
						Title = UILib.UILibFrame.sideBar.sideBarTitle.Text,
						Text = "The GUI has been hidden/closed.",
						Duration = 5,
						Button1 = "Re-open",
						Button2 = "Close",
						Callback = bindf
					})
				end
			end
		end)
	end
end

function lib.hideWindowFrameButton(buttonName, frameName)
	if UILib.UILibFrame:WaitForChild(frameName):WaitForChild("InnerFrame"):FindFirstChild(tostring(buttonName)) then
		UILib.UILibFrame:WaitForChild(frameName):WaitForChild("InnerFrame"):WaitForChild(tostring(buttonName)).Activated:Connect(function()
			lib.hideWindow()
			if lib.notificationOnHide ~= nil then
				if lib.notificationOnHide == true then
					local bindf = Instance.new("BindableFunction", script)
					bindf.OnInvoke = function(text)
						if text == "Re-open" then
							lib.showWindow()
							clickSound:Play()
							bindf:Destroy()
						end
					end
					local deleteCoroutine = coroutine.wrap(function()
						repeat wait() until bindf == nil
						if bindf == nil then
							wait(0.05)
							if UILib.Enabled == false then
								UILib:Destroy()
							end
						end
					end)
					deleteCoroutine()
					game:GetService("Debris"):AddItem(bindf, 5)
					game:GetService("StarterGui"):SetCore("SendNotification", {
						Title = UILib.UILibFrame.sideBar.sideBarTitle.Text,
						Text = "The GUI has been hidden/closed.",
						Duration = 5,
						Button1 = "Re-open",
						Button2 = "Close",
						Callback = bindf
					})
				end
			end
		end)
	end
end

function lib.showFrameSideButton(buttonName, frameName)
	if UILib.UILibFrame:FindFirstChild(tostring(frameName)) then
		local frame = UILib.UILibFrame:WaitForChild(tostring(frameName))
		if UILib.UILibFrame.sideBar.sideBarContents:FindFirstChild(tostring(buttonName)) then
			local button = UILib.UILibFrame.sideBar.sideBarContents:WaitForChild(tostring(buttonName))
			button.Activated:Connect(function()
				frame.Visible = not frame.Visible
			end)
		end
	end
end

function lib.returnButton(buttonName)
	if sideBarContents:FindFirstChild(tostring(buttonName)) then
		local btn = sideBarContents:WaitForChild(tostring(buttonName))
		return btn
	end
end

function lib.returnFrame(frameName)
	if UILibFrame:FindFirstChild(tostring(frameName)) then
		local frame = UILibFrame:WaitForChild(tostring(frameName))
		return frame
	end
end

function lib.returnFrameObject(objectName, frameName)
	if UILibFrame:FindFirstChild(frameName) then
		local frame = UILibFrame:WaitForChild(frameName)
		local inframe = frame:WaitForChild("InnerFrame")
		if inframe:FindFirstChild(tostring(objectName)) then
			local obj = inframe:WaitForChild(tostring(objectName))
			return obj
		end
	end
end

function lib.setHideGUIKeyBind(keybind)
	keybindG = keybind
end

local UserInputService = game:GetService("UserInputService")
local runService = (game:GetService("RunService"));

local gui = UILib.UILibFrame

local dragging
local dragInput
local dragStart
local startPos

function Lerp(a, b, m)
	return a + (b - a) * m
end;

local lastMousePos
local lastGoalPos
local DRAG_SPEED = (8); -- // The speed of the UI drag.
function Update(dt)
	if not (startPos) then return end;
	if not (dragging) and (lastGoalPos) then
		gui.Position = UDim2.new(startPos.X.Scale, Lerp(gui.Position.X.Offset, lastGoalPos.X.Offset, dt * DRAG_SPEED), startPos.Y.Scale, Lerp(gui.Position.Y.Offset, lastGoalPos.Y.Offset, dt * DRAG_SPEED))
		return 
	end;

	local delta = (lastMousePos - UserInputService:GetMouseLocation())
	local xGoal = (startPos.X.Offset - delta.X);
	local yGoal = (startPos.Y.Offset - delta.Y);
	lastGoalPos = UDim2.new(startPos.X.Scale, xGoal, startPos.Y.Scale, yGoal)
	gui.Position = UDim2.new(startPos.X.Scale, Lerp(gui.Position.X.Offset, xGoal, dt * DRAG_SPEED), startPos.Y.Scale, Lerp(gui.Position.Y.Offset, yGoal, dt * DRAG_SPEED))
end;

gui.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		dragging = true
		dragStart = input.Position
		startPos = gui.Position
		lastMousePos = UserInputService:GetMouseLocation()

		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				dragging = false
			end
		end)
	end
end)

gui.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
		dragInput = input
	end
end)

runService.Heartbeat:Connect(Update)

return lib
